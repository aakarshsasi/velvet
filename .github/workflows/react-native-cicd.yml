name: React Native CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - "**.md"
      - "LICENSE"
      - "docs/**"
  pull_request:
    branches: [main, master]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: "Build type to run"
        options:
          - ios
          - all

env:
  EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
  EXPO_APPLE_ID: ${{ secrets.EXPO_APPLE_ID }}
  EXPO_APPLE_PASSWORD: ${{ secrets.EXPO_APPLE_PASSWORD }}
  EXPO_TEAM_ID: ${{ secrets.EXPO_TEAM_ID }}
  NODE_OPTIONS: --openssl-legacy-provider --max_old_space_size=4096

jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"

  # Quality Checks
  quality-checks:
    needs: check-skip
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check
        run: npx tsc --noEmit

      - name: ESLint check
        run: npx expo lint --max-warnings 100

      - name: Prettier format check
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,md}" || echo "Prettier formatting issues found - continuing build"

  # Create Release
  create-release:
    runs-on: ubuntu-latest
    needs: quality-checks
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || github.event_name == 'workflow_dispatch'
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            ## Velvet App Build v${{ github.run_number }}
            
            ### Changes
            - Automated build from commit ${{ github.sha }}
            - Built on: ${{ github.event.head_commit.timestamp }}
            
            ### Downloads
            - **iOS Build**: Automatically submitted to TestFlight
            
            ### Installation
            - iOS: Available in TestFlight automatically
            - Android: Build paused (can be re-enabled later)
          draft: false
          prerelease: false

  # iOS Build (Local - No EAS Minutes Used)
  ios-build:
    runs-on: macos-latest
    needs: [quality-checks, create-release]
    if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || (github.event_name == 'workflow_dispatch' && (github.event.inputs.buildType == 'ios' || github.event.inputs.buildType == 'all'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup EAS CLI
        run: npm install -g eas-cli

      - name: Login to EAS
        run: |
          echo "EXPO_TOKEN is set: $([[ -n "$EXPO_TOKEN" ]] && echo "yes" || echo "no")"
          eas whoami

      - name: Setup iOS build environment
        run: |
          # Install Xcode command line tools
          xcode-select --install || true
          # Install CocoaPods
          sudo gem install cocoapods

      - name: Build iOS Production
        run: |
          export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
          eas build --platform ios --profile production --local --non-interactive --output=./app-ios-prod.ipa
        env:
          NODE_ENV: production

      - name: Submit to App Store (TestFlight)
        run: |
          echo "Attempting TestFlight submission..."
          echo "Note: EAS Submit may be experiencing outages - check https://status.expo.dev/"
          eas submit -p ios --path ./app-ios-prod.ipa --non-interactive || {
            echo "TestFlight submission failed - this may be due to EAS Submit outage"
            echo "Build completed successfully - you can manually submit later"
            echo "Check EAS Submit status: https://status.expo.dev/"
          }
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}

      - name: Upload iOS build to GitHub Releases
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./app-ios-prod.ipa
          asset_name: app-ios-prod.ipa
          asset_content_type: application/octet-stream

  # Android Build (Local - No EAS Minutes Used) - PAUSED
  # android-build:
  #   runs-on: ubuntu-latest
  #   needs: [quality-checks, create-release]
  #   if: (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')) || (github.event_name == 'workflow_dispatch' && (github.event.inputs.buildType == 'android' || github.event.inputs.buildType == 'all'))
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: "20"
  #         cache: 'npm'

  #     - name: Install dependencies
  #       run: npm ci

  #     - name: Setup EAS CLI
  #       run: npm install -g eas-cli

  #     - name: Login to EAS
  #       run: |
  #         echo "EXPO_TOKEN is set: $([[ -n "$EXPO_TOKEN" ]] && echo "yes" || echo "no")"
  #         eas whoami

  #     - name: Setup Android build environment
  #       run: |
  #         # Install Java
  #         sudo apt-get update
  #         sudo apt-get install -y openjdk-11-jdk
  #         # Install Android SDK
  #         wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
  #         unzip commandlinetools-linux-9477386_latest.zip
  #         mkdir -p android-sdk/cmdline-tools
  #         mv cmdline-tools android-sdk/cmdline-tools/latest
  #         export ANDROID_HOME=$PWD/android-sdk
  #         export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools
  #         echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
  #         echo "PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools" >> $GITHUB_ENV

  #     - name: Build Android app locally (No EAS Minutes)
  #       run: |
  #         export NODE_OPTIONS="--openssl-legacy-provider --max_old_space_size=4096"
  #         eas build --platform android --profile production --local --non-interactive --output=./velvet-android-build.aab
  #       env:
  #         NODE_ENV: production

  #     - name: Upload Android build to GitHub Releases
  #       uses: actions/upload-release-asset@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         upload_url: ${{ needs.create-release.outputs.upload_url }}
  #         asset_path: ./velvet-android-build.aab
  #         asset_name: velvet-android-build.aab
  #         asset_content_type: application/vnd.android.package-archive
